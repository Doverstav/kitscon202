{"version":3,"sources":["logo.svg","components/Home.js","components/Ads/Ads.js","components/ExclusiveContent/ExclusiveContent.js","components/common/Button.js","components/WebMonetizationSpoofer/WebMonetizationSpoofer.js","components/common/Separator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","monetization","useMonetizationState","counter","useMonetizationCounter","state","totalAmount","assetScale","toFixed","assetCode","Button","classNames","active","className","onClick","text","WebMonetizationSpoofer","useState","sliderValue","setSliderValue","isWebMonetized","setIsWebMonetized","wmStatus","setWMStatus","wmTag","useRef","startWMTimer","wmInterval","requestId","dispatchWMProgressEvent","progressEvent","CustomEvent","detail","current","paymentPointer","amount","document","dispatchEvent","dispatchWMStateEvent","wmEvent","stateEvent","finalized","undefined","pendingWM","console","log","setWMState","Math","random","toString","substring","Date","now","setTimeout","startWM","setInterval","toggleWM","clearTimeout","clearInterval","useEffect","createElement","head","querySelector","content","type","min","max","value","onChange","event","target","Separator","App","activePage","setActivePage","displayedComponent","setDisplayedComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8232477b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\n\r\nexport default function Home(props) {\r\n  return (\r\n    <div>\r\n      <h1>Here's a nice lil headline!</h1>\r\n      <p>\r\n        Welcome home! This page should probably work as an expaliner for what\r\n        this site is trying to do. I could probably bake the \"Exclusive\r\n        Content\"-demo into this page as well.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Home(props) {\r\n  return <div>Here we demo removable ads!</div>;\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  useMonetizationCounter,\r\n  useMonetizationState,\r\n} from \"react-web-monetization\";\r\n\r\nexport default function Home(props) {\r\n  const monetization = useMonetizationState();\r\n  const counter = useMonetizationCounter();\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        Here is some content that is available for everyone! Inspired by the 100\r\n        + 20 rule (add link to coil blogpost here)\r\n      </p>\r\n      {monetization.state === \"pending\" ? (\r\n        <p>Loading your exclusive content</p>\r\n      ) : null}\r\n      {monetization.state === \"started\" ? (\r\n        <p>This is your exclusive content! Wow, totally worth it.</p>\r\n      ) : null}\r\n      {!monetization.state || monetization.state === \"stopped\" ? (\r\n        <p>Unlock this content by signing up with Coil</p>\r\n      ) : null}\r\n      <p>Dosh sent: \r\n        {(counter.totalAmount / 10 ** counter.assetScale).toFixed(\r\n          counter.assetScale\r\n        )}\r\n        {counter.assetCode}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nexport default function Button(props) {\r\n  let classNames = `Button ${props.active ? \"Button-active\" : \"\"}`;\r\n  return (\r\n    <div className={classNames} onClick={props.onClick}>\r\n      {props.text}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./WMSpoofer.css\";\r\nimport Button from \"../common/Button\";\r\n\r\nconst WM_STATE_STOPPED = \"stopped\";\r\nconst WM_STATE_PENDING = \"pending\";\r\nconst WM_STATE_STARTED = \"started\";\r\nconst WM_EVENT_STOPPED = \"monetizationstop\";\r\nconst WM_EVENT_STARTED = \"monetizationstart\";\r\nconst WM_EVENT_PENDING = \"monetizationpending\";\r\nconst WM_EVENT_PROGRESS = \"monetizationprogress\";\r\n\r\nexport default function WebMonetizationSpoofer(props) {\r\n  // User-facing state\r\n  const [sliderValue, setSliderValue] = useState(10);\r\n  const [isWebMonetized, setIsWebMonetized] = useState(false);\r\n  const [wmStatus, setWMStatus] = useState(\"\");\r\n\r\n  // Internal WM state\r\n  const wmTag = useRef();\r\n  const startWMTimer = useRef();\r\n  const wmInterval = useRef();\r\n  const requestId = useRef();\r\n\r\n  const dispatchWMProgressEvent = () => {\r\n    const progressEvent = new CustomEvent(WM_EVENT_PROGRESS, {\r\n      detail: {\r\n        requestId: requestId.current,\r\n        paymentPointer: wmTag.current,\r\n        amount: 1,\r\n        assetCode: \"SEK\",\r\n        assetScale: 3,\r\n      },\r\n    });\r\n\r\n    document.monetization.dispatchEvent(progressEvent);\r\n  };\r\n\r\n  const dispatchWMStateEvent = (wmEvent) => {\r\n    const stateEvent = new CustomEvent(wmEvent, {\r\n      detail: {\r\n        requestId: requestId.current,\r\n        paymentPointer: wmTag.current,\r\n        finalized: wmEvent === WM_EVENT_STOPPED ? true : undefined, // Should payment not be final?\r\n      },\r\n    });\r\n\r\n    document.monetization.dispatchEvent(stateEvent);\r\n  };\r\n\r\n  const generateId = () => {\r\n    console.log(\"Generating id\");\r\n    requestId.current =\r\n      Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n  };\r\n\r\n  const pendingWM = () => {\r\n    console.log(\"Pending WM\");\r\n\r\n    setWMState(WM_STATE_PENDING);\r\n    dispatchWMStateEvent(WM_EVENT_PENDING);\r\n\r\n    generateId(); // Should this only be generated once?\r\n    startWMTimer.current = setTimeout(startWM, 1000);\r\n  };\r\n\r\n  const setWMState = (state) => {\r\n    setWMStatus(state);\r\n    document.monetization.state = state;\r\n  };\r\n\r\n  const startWM = () => {\r\n    console.log(`Starting WM with id ${requestId.current}`);\r\n\r\n    setWMState(WM_STATE_STARTED);\r\n    dispatchWMStateEvent(WM_EVENT_STARTED);\r\n\r\n    // Send one instance of money directly\r\n    dispatchWMProgressEvent();\r\n    wmInterval.current = setInterval(() => {\r\n      console.log(`Sending money! id: ${requestId.current}`);\r\n      dispatchWMProgressEvent();\r\n    }, 1000);\r\n  };\r\n\r\n  const stopWM = () => {\r\n    console.log(\"Stopping WM\");\r\n\r\n    setWMState(WM_STATE_STOPPED);\r\n    dispatchWMStateEvent(WM_EVENT_STOPPED);\r\n\r\n    // Clear timer & interval\r\n    clearTimeout(startWMTimer.current);\r\n    clearInterval(wmInterval.current);\r\n  };\r\n\r\n  const toggleWM = () => {\r\n    if (wmStatus === WM_STATE_STARTED || wmStatus === WM_STATE_PENDING) {\r\n      stopWM();\r\n    } else {\r\n      pendingWM();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"setting WM\");\r\n    document.monetization = document.createElement(\"div\");\r\n    setWMState(WM_STATE_STOPPED);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    wmTag.current = document.head.querySelector(\r\n      'meta[name=\"monetization\"]'\r\n    ).content;\r\n    setIsWebMonetized(!!wmTag.current);\r\n  }, []); // Should run more often than mount/unmount\r\n\r\n  return (\r\n    <div className=\"WMSpoofer-container\">\r\n      <p>Here we can show some status about WM</p>\r\n      <p>\r\n        Web Monetization tag: {isWebMonetized ? \"Exists\" : \"Does not exist\"}\r\n      </p>\r\n      <p>Web Monetization is: {wmStatus}</p>\r\n      <p>Maybe show money sent here, with an option to reset!</p>\r\n      <Button onClick={() => toggleWM()} text={\"Click me to start/stop WM\"} />\r\n      <Button text={\"I am another button\"} />\r\n      <label>Some slidervalue: {sliderValue}</label>\r\n      <input\r\n        type=\"range\"\r\n        min=\"0\"\r\n        max=\"50\"\r\n        value={sliderValue}\r\n        onChange={(event) => setSliderValue(event.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport \"./Separator.css\"\r\n\r\nexport default function Separator(props) {\r\n  return <div className=\"Separator\"></div>\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Home from \"./components/Home\";\r\nimport Ads from \"./components/Ads/Ads\";\r\nimport ExclusiveContent from \"./components/ExclusiveContent/ExclusiveContent\";\r\nimport WebMonetizationSpoofer from \"./components/WebMonetizationSpoofer/WebMonetizationSpoofer\";\r\nimport Button from \"./components/common/Button\";\r\nimport Separator from \"./components/common/Separator\";\r\n\r\nconst ADS = \"Ads\";\r\nconst EXCLUSIVE_CONTENT = \"ExclusiveContent\";\r\nconst HOME = \"Home\";\r\n\r\nfunction App() {\r\n  const [activePage, setActivePage] = useState(HOME);\r\n  const [displayedComponent, setDisplayedComponent] = useState(<Home />);\r\n\r\n  useEffect(() => {\r\n    if (activePage === ADS) {\r\n      setDisplayedComponent(<Ads />);\r\n    } else if (activePage === EXCLUSIVE_CONTENT) {\r\n      setDisplayedComponent(<ExclusiveContent />);\r\n    } else {\r\n      setDisplayedComponent(<Home />);\r\n    }\r\n  }, [activePage]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"sidebar\">\r\n        <Button\r\n          onClick={() => setActivePage(HOME)}\r\n          text={\"Home\"}\r\n          active={activePage === HOME}\r\n        />\r\n        <Button\r\n          onClick={() => setActivePage(ADS)}\r\n          text={\"Ads\"}\r\n          active={activePage === ADS}\r\n        />\r\n        <Button\r\n          onClick={() => setActivePage(EXCLUSIVE_CONTENT)}\r\n          text={\"Exclusive Content\"}\r\n          active={activePage === EXCLUSIVE_CONTENT}\r\n        />\r\n        <Separator />\r\n        <WebMonetizationSpoofer />\r\n      </div>\r\n      <div className=\"content\">\r\n        <div className=\"content-inner\">{displayedComponent}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}